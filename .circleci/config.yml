version: 2.1
orbs:
    slack: circleci/slack@4.1
    aws-cli: circleci/aws-cli@1.3.0

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            -   run:
                    name: Destroy environments
                    when: on_fail
                    command: |
                        aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                        aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
                        aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>


    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            -   restore_cache:
                    keys: [ backend-build ]
            -   run:
                    name: Revert migrations
                    # Add when this will run
                    when: on_fail
                    command: |
                        SUCCESS = $(curl --insecure https://kvdb.io/KWMQj5xDGvmEUe9tYmgorPcur/migration_<<parameters.workflow_id>>)
                        # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                        if(( $SUCCESS==1 ));
                        then
                            cd ~/backend
                            npm install
                            npm run migration:revert
                        fi

jobs:
    build-frontend:
        docker:
            -   image: circleci/node:13.8.0
        steps:
            - checkout
            -   restore_cache:
                    keys: [ frontend-build ]
            -   run:
                    name: Build front-end
                    command: |
                        cd frontend
                        npm install
                        npm run build
            -   save_cache:
                    paths: [ frontend/node_modules ]
                    key: frontend-build

    build-backend:
        docker:
            -   image: circleci/node:13.8.0
        steps:
            - checkout
            -   restore_cache:
                    keys: [ backend-build ]
            -   run:
                    name: Back-end build
                    command: |
                        cd backend
                        npm install
                        npm run build
            -   save_cache:
                    paths: [ backend/node_modules ]
                    key: backend-build

    test-frontend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ frontend-build ]
            # Your job code here
            -   run:
                    command: |
                        cd frontend
                        npm run test

    test-backend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ backend-build ]
            # Your job code here
            -   run:
                    command: |
                        cd backend
                        npm run test

    scan-frontend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ frontend-build ]
            # Your job code here
            -   run:
                    command: |
                        cd frontend
                        npm i
                        npm audit fix --audit-level=critical --force
                        npm audit fix --force
                        npm audit --audit-level=critical

    scan-backend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ backend-build ]
            # Your job code here
            -   run:
                    command: |
                        cd backend
                        npm i
                        npm audit fix --audit-level=critical --force
                        npm audit fix --force
                        npm audit --audit-level=critical

    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            -   image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            -   run:
                    name: Install Dependencies
                    command: |
                        yum -y install tar gzip
            -   run:
                    name: Ensure back-end infrastructure exists
                    command: |
                        aws cloudformation deploy \
                        --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --template-file .circleci/files/backend.yml \
                        --tags project=udacity-project \
                        --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
            -   run:
                    name: Ensure front-end infrastructure exist
                    command: |
                        aws cloudformation deploy \
                        --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --template-file .circleci/files/frontend.yml \
                        --tags project=udacity-project \
                        --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
            -   run:
                    name: Add back-end ip to ansible inventory
                    command: |
                        BACKEND_IP=$(aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text)

                        echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt

            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy-environment

    configure-infrastructure:
        docker:
            -   image: python:3.7-alpine3.11
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            -   add_ssh_keys:
                    fingerprints:
                      [ "48:48:9d:82:d5:6c:9e:85:40:52:e3:bc:b7:49:d4:c0" ]
            # attach workspace
            -   attach_workspace:
                    at: ~/
            -   run:
                    name: Install dependencies
                    command: |
                        pip install awscli
                        apk add --update ansible
            -   run:
                    name: Configure server
                    command: |
                        cd .circleci/ansible
                        cat inventory.txt
                        ansible-playbook -i inventory.txt configure-server.yml
            # Here's where you will add some code to rollback on failure
            - destroy-environment

    run-migrations:
        docker:
            # Docker image here that supports NodeJS
            -   image: circleci/node:13.8.0
                user: root
        steps:
            # Checkout code from git
            - checkout
            -   run:
                    name: Install dependencies
                    command: |
                        pip install awscli
                        apk add --update ansible
            -   run:
                    name: Run migrations
                    command: |
                        cd backend
                        npm install
                        npm run migrations > migrations_dump.txt
            -   run:
                    name: Send migration results to memstash
                    command: |
                        if grep -q "has been executed successfully." ~/project/backend/migration_dump.txt
                        then
                            curl --insecure https://kvdb.io/KWMQj5xDGvmEUe9tYmgorPcur/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
                        fi
            # Here's where you will add some code to rollback on failure
            - destroy-environment

    deploy-frontend:
        docker:
            # Docker image here that supports AWS CLI
            -   image: circleci/node:13.8.0
                user: root
        steps:
            # Checkout code from git
            - checkout
            -   run:
                    name: Install dependencies
                    command: |
                        apt-get update
                        apt -y install awscli
            -   run:
                    name: Get backend url
                    command: |
                        export BACKEND_IP=$(aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text)
                        echo API_URL="http://${BACKEND_IP}:3030"
                        cat frontend/.env
            -   run:
                    name: Deploy frontend objects
                    command: |
                        cd frontend
                        npm install
                        npm run build
                        tar -czvf artifact.tar.gz dist
                        aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment
            - rever-migrations

    deploy-backend:
        docker:
        # Docker image here that supports Ansible
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            -   add_ssh_keys:
                    fingerprints:
                      [ "48:48:9d:82:d5:6c:9e:85:40:52:e3:bc:b7:49:d4:c0" ]
            # attach workspace
            -   run:
                    name: Install dependencies
                    command: |
                        sudo apt update
                        sudo apt install software-properties-common
                        sudo add-apt-repository --yes --update ppa:ansible/ansible
                        sudo apt install ansible
                        pip install awscli
            -   run:
                    name: Build Backend
                    command: |
                        cd backend
                        npm install
                        echo ENVIROMENT=production > ".env"
                        echo TYPEORM_CONNECTION=postgres >> ".env"
                        echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
                        echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
                        echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
                        echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
                        echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
                        echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
                        echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
                        echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
                        npm run build
                        npm run prestart:prod
                        cd ..

                        tar -czvf artifact.tar.gz backend/
                        mv artifact.tar.gz .cicleci/ansible/roles/deploy/files/
            -   run:
                    name: Deploy backend
                    command: |
                        cd .circleci/ansible
                        echo "Content of inventory.txt"
                        cat inventory.txt
                        ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment
            - rever-migrations
            # Here's where you will add some code to rollback on failure

    smoke-test:
        docker:
            -   image: python:3.7-alpine3.11
        # Lightweight Docker image
        steps:
            # Checkout code from git
            -   run:
                    name: Install dependencies
                    command: |
                        apk add --update curl
                        pip install awscli
            -   run:
                    name: Get backend url
                    command: |
                        BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text)
                        echo "------------------------------------"
                        echo BACKEND_URL: http://${BACKEND_IP}:3030/api/status
                        echo "------------------------------------"
                        if curl http://${BACKEND_IP}:3030/api/status | grep "ok"
                        then
                          exit 0
                        else
                          exit 1
                        fi
            -   run:
                    name: Frontend smoke test.
                    command: |
                        FRONTEND_WEBSITE=http://khoadd6-devops-bucket-${CIRCLE_WORKFLOW_ID}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
                        echo $FRONTEND_WEBSITE
                        if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
                        then
                            exit 1
                        else
                            exit 1
                        fi
            # Here's where you will add some code to rollback on failure
            - destroy-environment
            - revert-migrations

    cloudfront-update:
        docker:
            # Docker image here that supports AWS CLI
            -   image: amazon/aws-cli
        steps:
            # Checkout code from git
            -   run:
                    name: Install dependencies
                    command: |
                        yum install -y tar gzip
            -   run:
                    name: Get Old Workflow ID
                    command: |
                        aws cloudformation list-exports \
                        --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text >> ~/project/oldWorkflowID.txt
                        cat ~/project/oldWorkflowID.txt
            -   run:
                    name: Update cloudfront distribution
                    command: |
                        aws cloudformation deploy \
                        --stack-name cloud-front-update-stack \
                        --template-file .circleci/file/cloudfront.yml \
                        --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
                        echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID}"
                        cat ~/project/oldWorkflowID.txt
            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project/oldWorkflowID.txt
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

        cleanup:
            docker:
                # Docker image here
                -   image: amazon/aws-cli
            steps:
                # Checkout code from git
                - checkout
                # attach workspace
                -   attach_workspace:
                        at: ~/
                -   run:
                        name: Install dependencies
                        command: |
                            yum install -y tar gzip
                -   run:
                        name: Get old stack workflow id
                        command: |
                            # your code here
                            export OldWorkflowID=$(cat ~/project/oldWorkflowID.txt)
                            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                                --stack-status-filter CREATE_COMPLETE --no-paginate --output text ))
                            echo Stack Names: "${STACKS[@]}"
                -   run:
                        name: Remove old stacks and files
                        command: |
                            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                            then
                                aws s3 rm s3://khoadd6-devops-bucket-${OldWorkflowID} --recursive
                                aws cloudformation delete-stack --stack-name "khoadd6-devops-backend-${OldWorkflowID}"
                                aws cloudformation delete-stack --stack-name "khoadd6-devops-frontend-${OldWorkflowID}"
                                echo "---------- [DELETED SUCCESSFULLY 100%] ----------"
                            else
                                echo "---------- [CLEANUP FAILED] ----------"
                            fi
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            -   test-frontend:
                    requires: [ build-frontend ]
            -   test-backend:
                    requires: [ build-backend ]
            -   scan-backend:
                    requires: [ build-backend ]
            -   scan-frontend:
                    requires: [ build-frontend ]
            -   deploy-infrastructure:
                    requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
                    filters:
                        branches:
                            only: [ test-feature-branch ]
            -   configure-infrastructure:
                    requires: [ deploy-infrastructure ]
            -   run-migrations:
                    requires: [ configure-infrastructure ]
            -   deploy-frontend:
                    requires: [ run-migrations ]
            -   deploy-backend:
                    requires: [ run-migrations ]
            -   smoke-test:
                    requires: [ deploy-backend, deploy-frontend ]
