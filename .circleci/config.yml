version: 2.1

orbs:
    slack: circleci/slack@4.9.3

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            -   run:
                    name: Destroy environments
                    when: on_fail
                    command: |
                        aws s3 rm s3://khoadd6-devops-bucket-<<parameters.workflow_id>> --recursive
                        aws cloudformation delete-stack --stack-name "khoadd6-devops-frontend-stack-<<parameters.workflow_id>>"
                        aws cloudformation delete-stack --stack-name "khoadd6-devops-backend-stack-<<parameters.workflow_id>>"

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
        steps:
            -   restore_cache:
                    keys: [ backend-build ]
            -   run:
                    name: Revert migrations
                    # Add when this will run
                    when: on_fail
                    command: |
                        # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                        export SUCCESS=$(curl --insecure "https://kvdb.io/KWMQj5xDGvmEUe9tYmgorPcur/migration_<<parameters.workflow_id>>" )
                        if(( $SUCCESS==1 ));
                        then
                            cd ~/project/backend
                            npm install
                            npm run migrations:revert
                        fi

jobs:
    slack-notify:
        docker:
            -   image: 'cimg/base:stable'
        steps:
            -   slack/notify:
                    event: fail
                    template: basic_fail_1
            -   slack/notify:
                    event: pass
                    template: success_tagged_deploy_1

    build-frontend:
        docker:
            -   image: circleci/node:13.8.0
        steps:
            - checkout
            -   restore_cache:
                    keys: [ frontend-build ]
            -   run:
                    name: Build Frontend
                    command: |
                        cd frontend
                        npm install
                        npm run build
            -   save_cache:
                    paths: [ frontend/node_modules ]
                    key: frontend-build

    build-backend:
        docker:
            -   image: circleci/node:13.8.0
        steps:
            - checkout
            -   restore_cache:
                    keys: [ backend-build ]
            -   run:
                    name: Build Backend
                    command: |
                        cd backend
                        npm install
                        npm run build
            -   save_cache:
                    paths: [ backend/node_modules ]
                    key: backend-build

    test-frontend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ frontend-build ]
            # Your job code here
            -   run:
                    name: Run Test Frontend
                    command: |
                        cd frontend
                        npm install
                        npm run test

    test-backend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ backend-build ]
            # Your job code here
            -   run:
                    name: Run Test Backend
                    command: |
                        cd backend
                        npm install
                        npm run test

    scan-frontend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ frontend-build ]
            # Your job code here
            -   run:
                    name: Run Scan Frontend
                    command: |
                        cd frontend
                        npm install
                        npm audit fix --audit-level=critical
    #                        npm audit fix --audit-level=critical --force
    #                        npm audit --audit-level=critical

    scan-backend:
        docker:
            # Docker image here
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            -   restore_cache:
                    keys: [ backend-build ]
            # Your job code here
            -   run:
                    name: Run Scan Backend
                    command: |
                        cd backend
                        npm audit fix --audit-level=critical
                        npm audit fix --audit-level=critical --force
                        npm audit --audit-level=critical

    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            -   image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            -   run:
                    name: Install tar gzip
                    command: |
                        yum install -y tar gzip
            -   run:
                    name: Ensure back-end infrastructure exists
                    command: |
                        aws cloudformation deploy \
                          --stack-name khoadd6-devops-backend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
                          --template-file .circleci/files/backend.yml \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                          --tags project=khoadd6-devops-backend-${CIRCLE_WORKFLOW_ID:0:7}

            -   run:
                    name: Ensure front-end infrastructure exist
                    command: |
                        aws cloudformation deploy \
                          --stack-name khoadd6-devops-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
                          --template-file .circleci/files/frontend.yml \
                          --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                          --tags project=khoadd6-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            -   run:
                    name: Add back-end ip to ansible inventory
                    command: |
                        cd .circleci/ansible

                        cat inventory.txt

                        aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text >> inventory.txt

                        cat inventory.txt

            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    configure-infrastructure:
        docker:
            # Docker image here that supports Ansible
            -   image: cimg/base:stable
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            -   add_ssh_keys:
                    fingerprints:
                      [ "48:48:9d:82:d5:6c:9e:85:40:52:e3:bc:b7:49:d4:c0" ]
            # attach workspace
            -   attach_workspace:
                    at: ~/
            -   run:
                    name: Install Ansible
                    command: |
                        sudo apt update
                        sudo apt install software-properties-common -y
                        sudo add-apt-repository --yes --update ppa:ansible/ansible
                        sudo apt install ansible -y
            -   run:
                    name: Install AWS CLI
                    command: |
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
            -   run:
                    name: Configure server
                    command: |
                        echo "---------- Location ----------"
                        pwd
                        ls

                        echo "---------- Run Ansible playbook ----------"
                        cd .circleci/ansible
                        cat inventory.txt
                        ansible-playbook -i inventory.txt configure-server.yml
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    run-migrations:
        docker:
            # Docker image here that supports NodeJS
            -   image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            -   attach_workspace:
                    at: ~/
            -   restore_cache:
                    keys: [ backend-build ]
            -   run:
                    name: Run migrations
                    command: |
                        cd backend
                        npm run migrations > migration_dump.txt
                        cat migration_dump.txt

            -   run:
                    name: Send migration results to memstash
                    working_directory: ./backend
                    command: |
                        if grep -q "has been executed successfully." ~/project/backend/migration_dump.txt
                        then
                            curl --insecure https://kvdb.io/KWMQj5xDGvmEUe9tYmgorPcur/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
                        fi
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
            # Docker image here that supports AWS CLI
            -   image: cimg/base:stable
        steps:
            # Checkout code from git
            - checkout
            -   attach_workspace:
                    at: ~/
            -   run:
                    name: Install Ansible
                    command: |
                        sudo apt update
                        sudo apt install software-properties-common -y
                        sudo add-apt-repository --yes --update ppa:ansible/ansible
                        sudo apt install ansible -y
            -   run:
                    name: Install AWS CLI
                    command: |
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
            -   run:
                    name: Install NodeJS 14
                    command: |
                        curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                        sudo apt install -y nodejs
            -   run:
                    name: Install dependencies
                    command: |
                        cd frontend
                        sudo npm i -g npm
                        rm -rf node_modules
            -   run:
                    name: Get backend url
                    command: |
                        export BACKEND_IP=$(aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text)

                        export API_URL="http://${BACKEND_IP}:3030"
                        echo "${API_URL}"
                        echo API_URL="http//${BACKEND_IP:3030}" >> frontend/.env
                        cat frontend/.env
            -   run:
                    name: Deploy frontend objects
                    command: |
                        cd frontend
                        npm install
                        npm run build
                        tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                        aws s3 cp dist s3://khoadd6-devops-bucket-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            -   revert-migrations:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-backend:
        docker:
            # Docker image here that supports Ansible
            -   image: cimg/base:stable
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            -   add_ssh_keys:
                    fingerprints:
                      [ "48:48:9d:82:d5:6c:9e:85:40:52:e3:bc:b7:49:d4:c0" ]
            # attach workspace
            -   attach_workspace:
                    at: ~/
            -   run:
                    name: Install Ansible
                    command: |
                        sudo apt update
                        sudo apt install software-properties-common -y
                        sudo add-apt-repository --yes --update ppa:ansible/ansible
                        sudo apt install ansible -y
            -   run:
                    name: Install AWS CLI
                    command: |
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
            -   run:
                    name: Deploy Backend
                    command: |
                        echo "---------- Zip Backend ----------"
                        tar -C backend -czvf artifact.tar.gz .
                        mkdir -p ~/project/.circleci/ansible/roles/deploy/files
                        cp -p artifact.tar.gz .circleci/ansible/roles/deploy/files
                        cd .circleci/ansible
                        cat inventory.txt
                        ansible-playbook -i inventory.txt deploy-backend.yml
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            -   revert-migrations:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    smoke-test:
        docker:
            # Lightweight Docker image
            -   image: cimg/base:stable
        steps:
            # Checkout code from git
            - checkout
            -   run:
                    name: Install Ansible
                    command: |
                        sudo apt update
                        sudo apt install software-properties-common -y
                        sudo add-apt-repository --yes --update ppa:ansible/ansible
                        sudo apt install ansible -y
            -   run:
                    name: Install AWS CLI
                    command: |
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        sudo ./aws/install
            -   run:
                    name: Install NodeJS 14
                    command: |
                        curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                        sudo apt install -y nodejs
            -   run:
                    name: Install dependencies
                    command: |
                        echo "Install Dependencies"
            -   run:
                    name: Backend smoke test.
                    command: |
                        BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                        --output text)
                        export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
                        echo "BACKEND_PUBLIC IP: ${BACKEND_PUBLIC_IP}"
                        echo "API_URL: ${API_URL}"

                        if curl "${API_URL}/api/status" | grep "ok"
                        then
                            exit 0
                        else
                            exit 1
                        fi
            -   run:
                    name: Frontend smoke test.
                    command: |
                        FRONTEND_WEBSITE=http://khoadd6-devops-bucket-${CIRCLE_WORKFLOW_ID}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
                        echo $FRONTEND_WEBSITE
                        if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
                        then
                            exit 1
                        else
                            exit 1
                        fi
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            -   revert-migrations:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cloudfront-update:
        docker:
            # Docker image here that supports AWS CLI
            -   image: amazon/aws-cli
        steps:
            # Checkout code from git
            -   run:
                    name: Install dependencies
                    command: |
                        yum install -y tar gzip
            -   run:
                    name: Get Old Workflow ID
                    command: |
                        aws cloudformation list-exports \
                        --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text >> ~/project/oldWorkflowID.txt
                        cat ~/project/oldWorkflowID.txt
            -   run:
                    name: Update cloudfront distribution
                    command: |
                        aws cloudformation deploy \
                        --stack-name cloud-front-update-stack \
                        --template-file .circleci/file/cloudfront.yml \
                        --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
                        echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID}"
                        cat ~/project/oldWorkflowID.txt
            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project/oldWorkflowID.txt
            # Here's where you will add some code to rollback on failure
            -   destroy-environment:
                    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cleanup:
        docker:
            # Docker image here
            -   image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            # attach workspace
            -   attach_workspace:
                    at: ~/
            -   run:
                    name: Install dependencies
                    command: |
                        yum install -y tar gzip
            -   run:
                    name: Get old stack workflow id
                    command: |
                        # your code here
                        export OldWorkflowID=$(cat ~/project/oldWorkflowID.txt)
                        export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text ))
                        echo Stack Names: "${STACKS[@]}"
            -   run:
                    name: Remove old stacks and files
                    command: |
                        if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                        then
                            aws s3 rm s3://khoadd6-devops-bucket-${OldWorkflowID} --recursive
                            aws cloudformation delete-stack --stack-name "khoadd6-devops-backend-${OldWorkflowID}"
                            aws cloudformation delete-stack --stack-name "khoadd6-devops-frontend-${OldWorkflowID}"
                            echo "---------- [DELETED SUCCESSFULLY 100%] ----------"
                        else
                            echo "---------- [CLEANUP FAILED] ----------"
                        fi

workflows:
    khoadd6-devops:
        jobs:
            #            - build-frontend
            #            - build-backend
            #            - slack-notify:
            #                  context: slack-secrets
            #                  requires:
            #                      - build-frontend
            #                      - build-backend
            #            -   test-frontend:
            #                    requires: [ build-frontend ]
            #            -   test-backend:
            #                    requires: [ build-backend ]
            #            -   scan-backend:
            #                    requires: [ build-backend ]
            #            -   scan-frontend:
            #                    requires: [ build-frontend ]
            -   deploy-infrastructure:
                    #                    requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
                    filters:
                        branches:
                            only: [ main ]
            -   configure-infrastructure:
                    requires: [ deploy-infrastructure ]
            -   run-migrations:
                    requires: [ configure-infrastructure ]
            -   slack-notify:
                    context: slack-secrets
                    requires:
                        - deploy-infrastructure
                        - configure-infrastructure
                        - run-migrations
            -   deploy-frontend:
                    requires: [ run-migrations ]
            -   deploy-backend:
                    requires: [ run-migrations ]
            -   smoke-test:
                    requires: [ deploy-backend, deploy-frontend ]
            -   cloudfront-update:
                    requires: [ smoke-test ]
            -   cleanup:
                    requires: [ cloudfront-update ]
